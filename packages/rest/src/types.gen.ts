// This file is auto-generated by @hey-api/openapi-ts

export type GetManyUserDtoResponseDto = {
  data: Array<UserDto>;
  count: number;
  total: number;
  page: number;
  pageCount: number;
};

export type UserDto = {
  firstName: string;
  lastName: string;
  email: string;
  emailVerified: boolean;
  isActive: boolean;
  fullName: string;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type CreateUpdateUserDto = {
  firstName: string;
  lastName: string;
  email: string;
  role: 'Admin' | 'User';
  isActive?: boolean;
};

export type role = 'Admin' | 'User';

export type ResetPasswordDto = {
  password: string;
};

export type SignUpDto = {
  password: string;
  firstName: string;
  lastName: string;
  email: string;
};

export type SuccessDto = {
  success: boolean;
  message?: string;
};

export type SignInDto = {
  email: string;
  password: string;
};

export type AuthDto = {
  user: UserDto;
  accessToken: string;
  refreshToken: string;
  expiresAt: number;
};

export type RefreshTokenDto = {
  token: string;
};

export type TokenDto = {
  accessToken: string;
  refreshToken: string;
  expiresAt: number;
};

export type GetManyPromptDtoResponseDto = {
  data: Array<PromptDto>;
  count: number;
  total: number;
  page: number;
  pageCount: number;
};

export type PromptDto = {
  title: string;
  description: string;
  createdBy: string;
  createdById: string;
  likesCount: number;
  isFavorite: boolean;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type CreateUpdatePromptDto = {
  title: string;
  description: string;
};

export type GetUsersData = {
  query?: {
    /**
     * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
     */
    cache?: number;
    /**
     * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
     */
    fields?: Array<string>;
    /**
     * Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a>
     */
    filter?: Array<string>;
    /**
     * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
     */
    join?: Array<string>;
    /**
     * Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a>
     */
    limit?: number;
    /**
     * Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a>
     */
    offset?: number;
    /**
     * Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a>
     */
    or?: Array<string>;
    /**
     * Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a>
     */
    page?: number;
    /**
     * Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a>
     */
    s?: string;
    /**
     * Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a>
     */
    sort?: Array<string>;
  };
};

export type GetUsersResponse = GetManyUserDtoResponseDto;

export type GetUsersError = unknown;

export type CreateUserData = {
  body: CreateUpdateUserDto;
};

export type CreateUserResponse = UserDto;

export type CreateUserError = unknown;

export type GetUserData = {
  path: {
    id: string;
  };
  query?: {
    /**
     * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
     */
    cache?: number;
    /**
     * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
     */
    fields?: Array<string>;
    /**
     * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
     */
    join?: Array<string>;
  };
};

export type GetUserResponse = UserDto;

export type GetUserError = unknown;

export type UpdateUserData = {
  body: CreateUpdateUserDto;
  path: {
    id: string;
  };
};

export type UpdateUserResponse = UserDto;

export type UpdateUserError = unknown;

export type DeleteUserData = {
  path: {
    id: string;
  };
};

export type DeleteUserResponse = unknown;

export type DeleteUserError = unknown;

export type ResetPasswordData = {
  body: ResetPasswordDto;
  path: {
    id: string;
  };
};

export type ResetPasswordResponse = unknown;

export type ResetPasswordError = unknown;

export type SignUpData = {
  body: SignUpDto;
};

export type SignUpResponse = SuccessDto;

export type SignUpError = unknown;

export type SignInData = {
  body: SignInDto;
};

export type SignInResponse = AuthDto;

export type SignInError = unknown;

export type RefreshTokenData = {
  body: RefreshTokenDto;
};

export type RefreshTokenResponse = TokenDto;

export type RefreshTokenError = unknown;

export type GetPromptsData = {
  query?: {
    /**
     * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
     */
    cache?: number;
    /**
     * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
     */
    fields?: Array<string>;
    /**
     * Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a>
     */
    filter?: Array<string>;
    /**
     * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
     */
    join?: Array<string>;
    /**
     * Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a>
     */
    limit?: number;
    /**
     * Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a>
     */
    offset?: number;
    /**
     * Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a>
     */
    or?: Array<string>;
    /**
     * Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a>
     */
    page?: number;
    /**
     * Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a>
     */
    s?: string;
    /**
     * Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a>
     */
    sort?: Array<string>;
  };
};

export type GetPromptsResponse = GetManyPromptDtoResponseDto;

export type GetPromptsError = unknown;

export type CreatePromptData = {
  body: CreateUpdatePromptDto;
};

export type CreatePromptResponse = PromptDto;

export type CreatePromptError = unknown;

export type GetPromptData = {
  path: {
    id: string;
  };
  query?: {
    /**
     * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
     */
    cache?: number;
    /**
     * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
     */
    fields?: Array<string>;
    /**
     * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
     */
    join?: Array<string>;
  };
};

export type GetPromptResponse = PromptDto;

export type GetPromptError = unknown;

export type UpdatePromptData = {
  body: CreateUpdatePromptDto;
  path: {
    id: string;
  };
};

export type UpdatePromptResponse = PromptDto;

export type UpdatePromptError = unknown;

export type DeletePromptData = {
  path: {
    id: string;
  };
};

export type DeletePromptResponse = unknown;

export type DeletePromptError = unknown;

export type MarkAsFavoriteData = {
  path: {
    id: string;
  };
};

export type MarkAsFavoriteResponse = unknown;

export type MarkAsFavoriteError = unknown;

export type RemoveFromFavoriteData = {
  path: {
    id: string;
  };
};

export type RemoveFromFavoriteResponse = SuccessDto;

export type RemoveFromFavoriteError = unknown;

export type $OpenApiTs = {
  '/users': {
    get: {
      req: GetUsersData;
      res: {
        /**
         * Get paginated response
         */
        '200': GetManyUserDtoResponseDto;
      };
    };
    post: {
      req: CreateUserData;
      res: {
        /**
         * Success
         */
        '201': UserDto;
        /**
         * Bad Request
         */
        '400': unknown;
        /**
         * Conflict
         */
        '409': unknown;
      };
    };
  };
  '/users/{id}': {
    get: {
      req: GetUserData;
      res: {
        '200': UserDto;
        /**
         * Not Found
         */
        '404': unknown;
      };
    };
    patch: {
      req: UpdateUserData;
      res: {
        '200': UserDto;
        /**
         * Bad Request
         */
        '400': unknown;
        /**
         * Not Found
         */
        '404': unknown;
        /**
         * Conflict
         */
        '409': unknown;
      };
    };
    delete: {
      req: DeleteUserData;
      res: {
        /**
         * Success
         */
        '200': unknown;
        /**
         * Bad Request
         */
        '400': unknown;
        /**
         * Not Found
         */
        '404': unknown;
      };
    };
  };
  '/users/{id}/reset-password': {
    post: {
      req: ResetPasswordData;
      res: {
        /**
         * Success
         */
        '200': unknown;
        /**
         * Bad Request
         */
        '400': unknown;
        /**
         * Not Found
         */
        '404': unknown;
      };
    };
  };
  '/auth/sign-up': {
    post: {
      req: SignUpData;
      res: {
        /**
         * Success
         */
        '201': SuccessDto;
        /**
         * Bad Request
         */
        '400': unknown;
        /**
         * Conflict
         */
        '409': unknown;
      };
    };
  };
  '/auth/sign-in': {
    post: {
      req: SignInData;
      res: {
        /**
         * Success
         */
        '201': AuthDto;
        /**
         * Bad Request
         */
        '400': unknown;
        /**
         * Too Many Requests
         */
        '429': unknown;
      };
    };
  };
  '/auth/token/refresh': {
    post: {
      req: RefreshTokenData;
      res: {
        /**
         * Success
         */
        '201': TokenDto;
        /**
         * Bad Request
         */
        '400': unknown;
        /**
         * Too Many Requests
         */
        '429': unknown;
      };
    };
  };
  '/prompts': {
    get: {
      req: GetPromptsData;
      res: {
        /**
         * Get paginated response
         */
        '200': GetManyPromptDtoResponseDto;
      };
    };
    post: {
      req: CreatePromptData;
      res: {
        /**
         * Success
         */
        '201': PromptDto;
        /**
         * Bad Request
         */
        '400': unknown;
        /**
         * Conflict
         */
        '409': unknown;
      };
    };
  };
  '/prompts/{id}': {
    get: {
      req: GetPromptData;
      res: {
        '200': PromptDto;
        /**
         * Not Found
         */
        '404': unknown;
      };
    };
    patch: {
      req: UpdatePromptData;
      res: {
        '200': PromptDto;
        /**
         * Bad Request
         */
        '400': unknown;
        /**
         * Not Found
         */
        '404': unknown;
        /**
         * Conflict
         */
        '409': unknown;
      };
    };
    delete: {
      req: DeletePromptData;
      res: {
        /**
         * Success
         */
        '200': unknown;
        /**
         * Bad Request
         */
        '400': unknown;
        /**
         * Not Found
         */
        '404': unknown;
      };
    };
  };
  '/prompts/{id}/mark-as-favorite': {
    post: {
      req: MarkAsFavoriteData;
      res: {
        /**
         * Success
         */
        '200': unknown;
        /**
         * Bad Request
         */
        '400': unknown;
        /**
         * Not Found
         */
        '404': unknown;
      };
    };
  };
  '/prompts/{id}/remove-from-favorite': {
    delete: {
      req: RemoveFromFavoriteData;
      res: {
        /**
         * Success
         */
        '200': SuccessDto;
        /**
         * Bad Request
         */
        '400': unknown;
        /**
         * Not Found
         */
        '404': unknown;
      };
    };
  };
};
