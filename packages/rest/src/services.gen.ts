// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from '@hey-api/client-axios';
import type {
  GetUsersData,
  GetUsersError,
  GetUsersResponse,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  GetUserData,
  GetUserError,
  GetUserResponse,
  UpdateUserData,
  UpdateUserError,
  UpdateUserResponse,
  DeleteUserData,
  DeleteUserError,
  DeleteUserResponse,
  ResetPasswordData,
  ResetPasswordError,
  ResetPasswordResponse,
  SignUpData,
  SignUpError,
  SignUpResponse,
  SignInData,
  SignInError,
  SignInResponse,
  RefreshTokenData,
  RefreshTokenError,
  RefreshTokenResponse,
  GetPromptsData,
  GetPromptsError,
  GetPromptsResponse,
  CreatePromptData,
  CreatePromptError,
  CreatePromptResponse,
  GetPromptData,
  GetPromptError,
  GetPromptResponse,
  UpdatePromptData,
  UpdatePromptError,
  UpdatePromptResponse,
  DeletePromptData,
  DeletePromptError,
  DeletePromptResponse,
  MarkAsFavoriteData,
  MarkAsFavoriteError,
  MarkAsFavoriteResponse,
  RemoveFromFavoriteData,
  RemoveFromFavoriteError,
  RemoveFromFavoriteResponse,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Get Users
 */
export const getUsers = (options?: Options<GetUsersData>) => {
  return (options?.client ?? client).get<GetUsersResponse, GetUsersError>({
    ...options,
    url: '/users',
  });
};

/**
 * Create A New User
 */
export const createUser = (options: Options<CreateUserData>) => {
  return (options?.client ?? client).post<CreateUserResponse, CreateUserError>({
    ...options,
    url: '/users',
  });
};

/**
 * Get User
 */
export const getUser = (options: Options<GetUserData>) => {
  return (options?.client ?? client).get<GetUserResponse, GetUserError>({
    ...options,
    url: '/users/{id}',
  });
};

/**
 * Update User
 */
export const updateUser = (options: Options<UpdateUserData>) => {
  return (options?.client ?? client).patch<UpdateUserResponse, UpdateUserError>(
    {
      ...options,
      url: '/users/{id}',
    },
  );
};

/**
 * Delete User
 */
export const deleteUser = (options: Options<DeleteUserData>) => {
  return (options?.client ?? client).delete<
    DeleteUserResponse,
    DeleteUserError
  >({
    ...options,
    url: '/users/{id}',
  });
};

/**
 * Reset Password
 */
export const resetPassword = (options: Options<ResetPasswordData>) => {
  return (options?.client ?? client).post<
    ResetPasswordResponse,
    ResetPasswordError
  >({
    ...options,
    url: '/users/{id}/reset-password',
  });
};

/**
 * Sign Up
 */
export const signUp = (options: Options<SignUpData>) => {
  return (options?.client ?? client).post<SignUpResponse, SignUpError>({
    ...options,
    url: '/auth/sign-up',
  });
};

/**
 * Sign In
 */
export const signIn = (options: Options<SignInData>) => {
  return (options?.client ?? client).post<SignInResponse, SignInError>({
    ...options,
    url: '/auth/sign-in',
  });
};

/**
 * Refresh Token
 */
export const refreshToken = (options: Options<RefreshTokenData>) => {
  return (options?.client ?? client).post<
    RefreshTokenResponse,
    RefreshTokenError
  >({
    ...options,
    url: '/auth/token/refresh',
  });
};

/**
 * Get Prompts
 */
export const getPrompts = (options?: Options<GetPromptsData>) => {
  return (options?.client ?? client).get<GetPromptsResponse, GetPromptsError>({
    ...options,
    url: '/prompts',
  });
};

/**
 * Create A New Prompt
 */
export const createPrompt = (options: Options<CreatePromptData>) => {
  return (options?.client ?? client).post<
    CreatePromptResponse,
    CreatePromptError
  >({
    ...options,
    url: '/prompts',
  });
};

/**
 * Get Prompt
 */
export const getPrompt = (options: Options<GetPromptData>) => {
  return (options?.client ?? client).get<GetPromptResponse, GetPromptError>({
    ...options,
    url: '/prompts/{id}',
  });
};

/**
 * Update Prompt
 */
export const updatePrompt = (options: Options<UpdatePromptData>) => {
  return (options?.client ?? client).patch<
    UpdatePromptResponse,
    UpdatePromptError
  >({
    ...options,
    url: '/prompts/{id}',
  });
};

/**
 * Delete Prompt
 */
export const deletePrompt = (options: Options<DeletePromptData>) => {
  return (options?.client ?? client).delete<
    DeletePromptResponse,
    DeletePromptError
  >({
    ...options,
    url: '/prompts/{id}',
  });
};

/**
 * Mark As Favorite
 */
export const markAsFavorite = (options: Options<MarkAsFavoriteData>) => {
  return (options?.client ?? client).post<
    MarkAsFavoriteResponse,
    MarkAsFavoriteError
  >({
    ...options,
    url: '/prompts/{id}/mark-as-favorite',
  });
};

/**
 * Remove From Favorite
 */
export const removeFromFavorite = (
  options: Options<RemoveFromFavoriteData>,
) => {
  return (options?.client ?? client).delete<
    RemoveFromFavoriteResponse,
    RemoveFromFavoriteError
  >({
    ...options,
    url: '/prompts/{id}/remove-from-favorite',
  });
};
